{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class PassangerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `registerPassanger()` */\n  static #_ = this.RegisterPassangerPath = '/Passanger';\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerPassanger()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerPassanger$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, PassangerService.RegisterPassangerPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `registerPassanger$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerPassanger(params, context) {\n    return this.registerPassanger$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findPassanger()` */\n  static #_2 = this.FindPassangerPath = '/Passanger/{email}';\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassanger$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassanger$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, PassangerService.FindPassangerPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findPassanger$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassanger$Plain(params, context) {\n    return this.findPassanger$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassanger()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassanger$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, PassangerService.FindPassangerPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findPassanger$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassanger(params, context) {\n    return this.findPassanger$Response(params, context).pipe(map(r => r.body));\n  }\n  static #_3 = this.ɵfac = function PassangerService_Factory(t) {\n    return new (t || PassangerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_4 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PassangerService,\n    factory: PassangerService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpResponse","filter","map","BaseService","RequestBuilder","PassangerService","constructor","config","http","registerPassanger$Response","params","context","rb","rootUrl","RegisterPassangerPath","body","request","build","responseType","accept","pipe","r","clone","undefined","registerPassanger","findPassanger$Plain$Response","FindPassangerPath","path","email","findPassanger$Plain","findPassanger$Response","findPassanger","factory","providedIn"],"sourceRoot":"","sources":["D:\\Users\\filip\\source\\repos\\FlightsBooker\\ClientApp\\src\\app\\api\\services\\passanger.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { PassangerDto } from '../models/passanger-dto';\r\nimport { PassangerModel } from '../models/passanger-model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PassangerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `registerPassanger()` */\r\n  static readonly RegisterPassangerPath = '/Passanger';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerPassanger()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerPassanger$Response(\r\n    params?: {\r\n      body?: PassangerDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, PassangerService.RegisterPassangerPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `registerPassanger$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerPassanger(\r\n    params?: {\r\n      body?: PassangerDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.registerPassanger$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findPassanger()` */\r\n  static readonly FindPassangerPath = '/Passanger/{email}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassanger$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassanger$Plain$Response(\r\n    params: {\r\n      email: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<PassangerModel>> {\r\n    const rb = new RequestBuilder(this.rootUrl, PassangerService.FindPassangerPath, 'get');\r\n    if (params) {\r\n      rb.path('email', params.email, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<PassangerModel>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findPassanger$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassanger$Plain(\r\n    params: {\r\n      email: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<PassangerModel> {\r\n    return this.findPassanger$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PassangerModel>): PassangerModel => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassanger()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassanger$Response(\r\n    params: {\r\n      email: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<PassangerModel>> {\r\n    const rb = new RequestBuilder(this.rootUrl, PassangerService.FindPassangerPath, 'get');\r\n    if (params) {\r\n      rb.path('email', params.email, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<PassangerModel>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findPassanger$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassanger(\r\n    params: {\r\n      email: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<PassangerModel> {\r\n    return this.findPassanger$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<PassangerModel>): PassangerModel => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}